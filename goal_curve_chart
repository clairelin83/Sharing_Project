#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import matplotlib.pyplot as plt
import numpy as np;

np.random.seed(1)
import pandas as pd
import math

raw = pd.read_csv('location')

ans = input('Do you need to edit number?(Y/N)')


# identify need to add new value or not
def boolin(ans):
    if ans == 'Y' or ans == 'y':

        week_new_value = input('Please input the week number.')
        launch_new_value = input('Please input the launch number.')
        ab_new_value = input('Please input the AB GMS number.')
        gms_new_value = input('Please input the TTL GMS number.')

        raw.at[int(week_new_value) - 1, 'Launch'] = int(launch_new_value)
        raw.at[int(week_new_value) - 1, 'AB GMS'] = int(ab_new_value)
        raw.at[int(week_new_value) - 1, 'TTL GMS'] = int(gms_new_value)

        ans = input('Do you need to edit more number?(Y/N)')
        boolin(ans)
    elif ans == 'N' or ans == 'n':
        print('ok')
    else:
        ans = input('Error. Please enter again. Do you need to edit number?(Y/N)')
        boolin(ans)


boolin(ans)

raw.to_csv('location', index=False)

# identify the  week  with NaN number
empty_week = min(raw['Launch'][raw['Launch'].isnull()].index)

# forecast future week
week_limit = empty_week + 4
# week_limit = 51
launch_limit = raw.iloc[week_limit]['Launch Goal']
ab_limit = raw.iloc[week_limit]['AB GMS Goal']
ttl_limit = raw.iloc[week_limit]['TTL GMS Goal']

l_grate = ((raw.iloc[empty_week - 1]['Launch'] - raw.iloc[0]['Launch']) / raw.iloc[0]['Launch'] / empty_week / 100 + 1)
ab_grate = ((raw.iloc[empty_week - 1]['AB GMS'] - raw.iloc[0]['AB GMS']) / raw.iloc[0]['AB GMS'] / empty_week / 100 + 1)
gms_grate = ((raw.iloc[empty_week - 1]['TTL GMS'] - raw.iloc[0]['TTL GMS']) / raw.iloc[0][
    'TTL GMS'] / empty_week / 100 + 1)

raw2 = raw.copy()

for i in range(0, 52):

    if empty_week + i < 53:
        raw2.loc[empty_week + i:, 'predict_launch'] = raw.loc[empty_week - 1, 'Launch'] * math.pow(l_grate, i)
        raw2.loc[empty_week + i:, 'predict_ab'] = raw.loc[empty_week - 1, 'AB GMS'] * math.pow(ab_grate, i)
        raw2.loc[empty_week + i:, 'predict_gms'] = raw.loc[empty_week - 1, 'TTL GMS'] * math.pow(gms_grate, i)
    else:
        pass

raw2.loc[empty_week - 1, 'predict_launch'] = raw.loc[empty_week - 1, 'Launch']
raw2.loc[empty_week - 1, 'predict_ab'] = raw.loc[empty_week - 1, 'AB GMS']
raw2.loc[empty_week - 1, 'predict_gms'] = raw.loc[empty_week - 1, 'TTL GMS']

# Launch
plt.subplot(3, 1, 1)
plt.plot(raw['number'], raw['Launch Goal'], color='green', linewidth=1, label='Goal')
plt.plot(raw['number'], raw['Launch'], color='orange', linewidth=1, label='Actual')
plt.plot(raw['number'], raw2['predict_launch'], color='brown', linewidth=1, label='Predict', ls='--')
plt.xlabel('Week')
plt.ylabel('Launch')
x_ticks = np.arange(0, 53, 2)
plt.xticks(x_ticks)
y_ticks = np.arange(0, launch_limit, 500)
plt.yticks(y_ticks)
plt.xlim(1, week_limit)
plt.ylim(0, launch_limit)
plt.legend()

# AB GMS
plt.subplot(3, 1, 2)
plt.plot(raw['number'], raw['AB GMS Goal'], color='green', linewidth=1, label='Goal')
plt.plot(raw['number'], raw['AB GMS'], color='orange', linewidth=1, label='Actual')
plt.plot(raw['number'], raw2['predict_ab'], color='brown', linewidth=1, label='Predict', ls='--')
plt.xlabel('Week')
plt.ylabel('AB GMS')
x_ticks = np.arange(0, 53, 2)
plt.xticks(x_ticks)
y_ticks = np.arange(0, ab_limit, 100000)
plt.yticks(y_ticks)
plt.xlim(1, week_limit)
plt.ylim(0, ab_limit)
plt.legend()

# TTL GMS
plt.subplot(3, 1, 3)
plt.plot(raw['number'], raw['TTL GMS Goal'], color='green', linewidth=1, label='Goal')
plt.plot(raw['number'], raw['TTL GMS'], color='orange', linewidth=1, label='Actual')
plt.plot(raw['number'], raw2['predict_gms'], color='brown', linewidth=1, label='Predict', ls='--')
plt.xlabel('Week')
plt.ylabel('Total GMS')
x_ticks = np.arange(0, 53, 2)
plt.xticks(x_ticks)
y_ticks = np.arange(0, ttl_limit, 5000000)
plt.yticks(y_ticks)
plt.xlim(1, week_limit)
plt.ylim(0, ttl_limit)
plt.legend()

plt.tight_layout()

plt.show()
